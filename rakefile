require 'zemu'

# Serial Input/Output object
#
# Represents a serial connection between the emulated CPU
# and the host machine, with input and output mapped to Z80 I/O
# ports.
class Serial6850 < Zemu::Config::IOPort
    # Constructor.
    #
    # Takes a block in which the parameters of the serial port
    # can be initialized.
    #
    # All parameters can be set within this block.
    # They become readonly as soon as the block completes.
    #
    # @example
    #   
    #   Zemu::Config::SerialPort.new do
    #       name "serial"
    #       in_port 0x00
    #       out_port 0x01
    #   end
    #
    #
    def initialize
        super

        when_setup do
            "zuint8 io_#{name}_tx;\n" +
            "zuint8 io_#{name}_rx;\n" +
            "zuint8 io_#{name}_status;\n" +
            "\n" +
            "zusize zemu_io_#{name}_buffer_size(void)\n" +
            "{\n" +
            "    if (io_#{name}_status & 0x02) return 0;\n" +
            "    else return 1;\n" +
            "}\n" +
            "\n" +
            "void zemu_io_#{name}_master_puts(zuint8 val)\n" +
            "{\n" +
            "    io_#{name}_rx = val;\n" +
            "    io_#{name}_status |= 0x01;\n" +
            "}\n" +
            "\n" +
            "zuint8 zemu_io_#{name}_master_gets(void)\n" +
            "{\n" +
            "    io_#{name}_status |= 0x02;\n" +
            "    return io_#{name}_tx;\n" +
            "}\n"
        end

        when_read do
            "if (port == #{data_port})\n" +
            "{\n" +
            "    io_#{name}_status &= ~0x01;\n" +
            "    return io_#{name}_rx;\n" +
            "}\n" +
            "else if (port == #{control_port})\n" +
            "{\n" +
            "    return io_#{name}_status;\n" +
            "}\n"
        end

        when_write do
            "if (port == #{data_port})\n" +
            "{\n" +
            "    io_#{name}_status &= ~0x02;\n" +
            "    io_#{name}_tx = value;\n" +
            "}\n" +
            "else if (port == #{control_port})\n" +
            "{\n" +
            "    if (value & 0x03) io_#{name}_status = 0x02;\n" +
            "}\n"
        end
    end

    # Defines FFI API which will be available to the instance wrapper if this IO device is used.
    def functions
        [
            {"name" => "zemu_io_#{name}_master_puts".to_sym, "args" => [:uint8], "return" => :void},
            {"name" => "zemu_io_#{name}_master_gets".to_sym, "args" => [], "return" => :uint8},
            {"name" => "zemu_io_#{name}_buffer_size".to_sym, "args" => [], "return" => :uint64}
        ]
    end

    # Valid parameters for a SerialPort, along with those
    # defined in [Zemu::Config::IOPort].
    def params
        super + %w(data_port control_port)
    end
end

desc "Build zboot binary"
task :build do
    system("vasmz80_oldstyle -esc -L zboot.lst -Fbin -o zboot.bin zboot.asm")
    system("z80dasm -l -a -t zboot.bin > zboot.diss")
end

desc "Flash to ROM"
task :flash => :build do
    system("minipro -p at28c64b -s -w zboot.bin")
end

task :run => :build do
    conf = Zemu::Config.new do
        name "zemu_zforth"

        clock_speed 3_686_400

        add_memory (Zemu::Config::ROM.new do
            name "rom"
            address 0x0000
            size    0x2000
            
            contents from_binary("zboot.bin")[0..0x1fff]
        end)

        add_memory (Zemu::Config::RAM.new do
            name "ram"
            address 0x8000
            size    0x7FFF
        end)

        add_io (Serial6850.new do
            name "serial"
            control_port 0x00
            data_port 0x01
        end)
    end

    puts "Starting emulator..."

    Zemu.start_interactive(conf)
end
